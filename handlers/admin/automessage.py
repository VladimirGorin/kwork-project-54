from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from filters import ButtonFilter, StateFilter
from .commons import back_menu
from database import get_automessages, create_automessage, get_automessage, delete_automessage, recovery_automessage
from utils import get_menu, get_delay_str, get_delay_int, get_inline
from states import AdminState
from callback_factory import Automessage


router = Router()

automessage_menu = ['–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ', *back_menu]

anchors = {
    '{username}': '–Æ–∑–µ—Ä–Ω—ç–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    '{first_name}': '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    '{last_name}': '–§–∞–º–∏–ª–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
    '{invite_url}': '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞',
    '{quantity_refers}': '–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
    '{needed_refers}': '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤',
    '{remain_refers}': '–û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'
}


@router.message(ButtonFilter('ü§ñ –ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è'))
async def handler(message: Message):
    text = '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:'
    menu = get_menu(automessage_menu)
    await message.answer(text=text, reply_markup=menu)
    automessages = await get_automessages()
    for automessage_id, text, photo, delay_int in automessages:
        delay_str = get_delay_str(delay_int)
        text = f'–ó–∞–¥–µ—Ä–∂–∫–∞: {delay_str}\n\n{text}'
        inline = get_inline([('‚ùå –£–¥–∞–ª–∏—Ç—å', Automessage(action='delete', value=automessage_id))])
        if photo:
            await message.answer_photo(caption=text,
                                       photo=photo,
                                       reply_markup=inline)
        else:
            await message.answer(text=text,
                                 reply_markup=inline)


@router.message(ButtonFilter('–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ'))
async def handler(message: Message, state: FSMContext):
    text = ('–£–∫–∞–∂–∏—Ç–µ –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è.\n'
            '–§–æ—Ä–º–∞—Ç - <code>3–¥ 12—á 10–º 15—Å</code>')
    menu = get_menu(back_menu)
    await state.set_state(AdminState.WaitingAutomessageDelay)
    await message.answer(text=text,
                         reply_markup=menu)


@router.message(StateFilter(AdminState.WaitingAutomessageDelay))
async def handler(message: Message, state: FSMContext):
    try:
        delay_int = get_delay_int(message.text)
        await state.set_state(AdminState.WaitingAutomessage)
        await state.update_data({'delay_int': delay_int, 'delay_str': message.text})
        anchors_str = '\n'.join([f'<code>{key}</code> - {value}' for key, value in anchors.items()])
        text = ('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏—è.\n\n'
                f'–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: \n{anchors_str}')
    except:
        text = '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç!'
    menu = get_menu(back_menu)
    await message.answer(text, reply_markup=menu)


@router.message(StateFilter(AdminState.WaitingAutomessage))
async def handler(message: Message, state: FSMContext):
    message_text = message.html_text
    if message.photo:
        photo = message.photo[-1].file_id
    else:
        photo = None
    data = await state.get_data()
    delay_int = data.get('delay_int')
    delay_str = data.get('delay_str')
    await create_automessage(message_text, photo, delay_int)

    text = '–ê–≤—Ç–æ—Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!'
    menu = get_menu(automessage_menu)
    await message.answer(text, reply_markup=menu)

    text = f'–ó–∞–¥–µ—Ä–∂–∫–∞: {delay_str}\n\n{message_text}'
    if photo:
        await message.answer_photo(caption=text,
                                   photo=photo)
    else:
        await message.answer(text=text)

    await state.set_state(AdminState.Default)
    await state.set_data({})


@router.callback_query(Automessage.filter(F.action == 'delete'))
async def handler(callback_query: CallbackQuery, callback_data: Automessage):
    automessage_id = callback_data.value
    await delete_automessage(automessage_id)
    inline = get_inline([('‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', Automessage(action='recovery', value=automessage_id))])
    await callback_query.message.edit_reply_markup(reply_markup=inline)


@router.callback_query(Automessage.filter(F.action == 'recovery'))
async def handler(callback_query: CallbackQuery, callback_data: Automessage):
    automessage_id = callback_data.value
    await recovery_automessage(automessage_id)
    inline = get_inline([('‚ùå –£–¥–∞–ª–∏—Ç—å', Automessage(action='delete', value=automessage_id))])
    await callback_query.message.edit_reply_markup(reply_markup=inline)
